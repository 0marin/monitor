from flask import Flask, request, jsonify, render_template, redirect, url_for
import os
import uuid
import logging
import sys
from datetime import datetime, timezone

# –í–ò–ü–†–ê–í–õ–ï–ù–û: –°–ø—Ä–æ—â—É—î–º–æ —ñ–º–ø–æ—Ä—Ç–∏ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∞–±—Å–æ–ª—é—Ç–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏
import data_manager
import scheduler_tasks
import monitor_engine

# Telegram sender –ø–æ–∫–∏ –Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π
try:
    from telegram_sender import send_telegram_message
except ImportError:
    def send_telegram_message(message):
        logging.warning("Telegram sender not available")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('logs/app.log', encoding='utf-8')  # –í–ò–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∏–±—Ä–∞–≤ 'web_monitor/'
    ]
)

print("üöÄ Starting Web Monitor application...")
logging.info("Starting Web Monitor application")

app = Flask(__name__, template_folder='templates', static_folder='static')

def format_datetime_filter(value, format='%d %B %Y %H:%M:%S'):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É ISO datetime –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å–∏—Å—Ç–µ–º—ã."""
    if value is None or value == "":
        return ""
    try:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ value - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ ISO
        if isinstance(value, str):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã ISO datetime
            if value.endswith('Z'):
                dt_object = datetime.fromisoformat(value.replace('Z', '+00:00'))
            elif '+' in value[-6:] or value.endswith('00:00'):
                dt_object = datetime.fromisoformat(value)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ timezone, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º UTC
                dt_object = datetime.fromisoformat(value).replace(tzinfo=timezone.utc)
        else:
            dt_object = value
        
        # –í–ò–ü–†–ê–í–õ–ï–ù–û: –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –ª–æ–∫–∞–ª—å–Ω–∏–π —á–∞—Å —Å–∏—Å—Ç–µ–º–∏
        if dt_object.tzinfo is not None:
            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∑ UTC –≤ –ª–æ–∫–∞–ª—å–Ω–∏–π —á–∞—Å
            dt_object = dt_object.astimezone()
        else:
            # –Ø–∫—â–æ –Ω–µ–º–∞—î timezone info, –≤–≤–∞–∂–∞—î–º–æ —â–æ —Ü–µ –≤–∂–µ –ª–æ–∫–∞–ª—å–Ω–∏–π —á–∞—Å
            pass
        
        return dt_object.strftime(format)
    except (ValueError, TypeError) as e:
        logging.warning(f"Could not format datetime string '{value}': {e}")
        return str(value) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å

app.jinja_env.filters['format_datetime'] = format_datetime_filter

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ)

# --- HTML –°—Ç—Ä–∞–Ω–∏—Ü—ã ---
@app.route('/')
def index_page():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–≤–µ—Ä–æ–∫."""
    try:
        checks = data_manager.load_checks()
        return render_template('index.html', checks=checks)
    except Exception as e:
        app.logger.error(f"Error loading checks for index page: {e}", exc_info=True)
        return render_template('index.html', checks=[], error="Failed to load checks")

@app.route('/add')
def add_check_page():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    return render_template('add_check.html')

@app.route('/check/<check_id>')
def monitor_details_page(check_id):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≤–µ—Ä–∫–µ."""
    try:
        check_details = data_manager.get_check_by_id(check_id)
        if not check_details:
            return render_template('error.html', 
                                 error_message=f"Check with ID {check_id} not found"), 404
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–≤–µ—Ä–æ–∫
        check_history = data_manager.load_check_history(check_id)
        
        # –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –¥–∞–Ω–∏—Ö –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é
        if check_history:
            # –°–æ—Ä—Ç—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –∑–∞ —á–∞—Å–æ–º (–Ω–æ–≤—ñ —Å–ø–æ—á–∞—Ç–∫—É)
            check_history.sort(key=lambda x: x.get('timestamp', ''), reverse=True)
            latest_history = check_history[0]
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –æ—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ
            check_time = check_details.get('last_checked_at')
            history_time = latest_history.get('timestamp')
            
            if history_time and (not check_time or history_time > check_time):
                logging.info(f"Data mismatch detected for check {check_id}. Syncing with latest history.")
                data_manager.sync_check_with_latest_history(check_id)
                # –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –ø—ñ—Å–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
                check_details = data_manager.get_check_by_id(check_id)
        
        return render_template('monitor_details.html', 
                             check=check_details, 
                             history=check_history,
                             check_id=check_id)
    except Exception as e:
        app.logger.error(f"Error loading check details for {check_id}: {e}", exc_info=True)
        return render_template('error.html', 
                             error_message="An error occurred while loading check details"), 500

@app.route('/check/<check_id>/edit')
def edit_check_page(check_id):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏."""
    try:
        check_details = data_manager.get_check_by_id(check_id)
        if not check_details:
            return render_template('error.html', 
                                 error_message=f"Check with ID {check_id} not found"), 404
        
        return render_template('edit_check.html', check=check_details)
    except Exception as e:
        app.logger.error(f"Error loading edit page for {check_id}: {e}", exc_info=True)
        return render_template('error.html', 
                             error_message="An error occurred while loading edit page"), 500

# --- API –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã ---

@app.route('/api/checks', methods=['POST'])
def api_add_check():
    """
    API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏.
    """
    if not request.is_json:
        return jsonify({"error": "Request must be JSON"}), 400

    data = request.get_json()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    required_fields = ['url', 'interval']
    missing_fields = [field for field in required_fields if field not in data]
    if missing_fields:
        return jsonify({"error": f"Missing required fields: {', '.join(missing_fields)}"}), 400

    try:
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        if not isinstance(data['url'], str) or not data['url'].startswith(('http://', 'https://')):
            return jsonify({"error": "Invalid URL format"}), 400
        if not isinstance(data['interval'], int) or data['interval'] < 1:
            return jsonify({"error": "Interval must be a positive integer (minutes)"}), 400
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∏ –∏—Ö –≤–∞–ª–∏–¥–∞—Ü–∏—è
        name = data.get('name')
        if name is not None and not isinstance(name, str):
            return jsonify({"error": "Name must be a string"}), 400
            
        selector = data.get('selector')
        if selector is not None and not isinstance(selector, str):
            return jsonify({"error": "Selector must be a string"}), 400

        change_threshold = data.get('change_threshold')
        if change_threshold is not None:
            if not isinstance(change_threshold, (int, float)) or not (0 <= change_threshold <= 100):
                return jsonify({"error": "Change threshold must be a number between 0 and 100"}), 400
        
        new_check_data = {
            "name": name,
            "url": data["url"],
            "selector": selector,
            "change_threshold": change_threshold,
            "interval": data["interval"]
        }
        
        created_check = data_manager.add_check(new_check_data)
        
        # –í–ò–ü–†–ê–í–õ–ï–ù–û: –î–æ–¥–∞—î–º–æ –Ω–æ–≤—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –¥–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
        if created_check.get("status") == "active":
            try:
                # –í–ò–ü–†–ê–í–õ–ï–ù–û: –î–æ–¥–∞—î–º–æ check_id —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç —Ñ—É–Ω–∫—Ü—ñ—ó
                scheduler_tasks.scheduler.add_job(
                    func=scheduler_tasks.scheduled_check_task,
                    trigger='interval',
                    minutes=created_check['interval'],
                    args=[created_check['id']],  # –ü–µ—Ä–µ–¥–∞—î–º–æ check_id —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
                    id=created_check['id'],
                    name=f"Check: {created_check.get('name', created_check['id'])}",
                    replace_existing=True
                )
                logging.info(f"–î–æ–¥–∞–Ω–æ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {created_check['id']}")
            except Exception as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –¥–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞: {e}")
        
        return jsonify(created_check), 201
    except Exception as e:
        app.logger.error(f"Error adding check: {e}", exc_info=True)
        return jsonify({"error": "An unexpected error occurred while adding the check."}), 500


@app.route('/api/checks', methods=['GET'])
def api_get_checks():
    """API —ç–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫."""
    checks = data_manager.load_checks()
    
    # –î–û–î–ê–ù–û: –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ –∫–æ–∂–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    for check in checks:
        check_id = check.get('id')
        if check_id:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å –∑ —ñ—Å—Ç–æ—Ä—ñ—ó
            history = data_manager.load_check_history(check_id)
            if history:
                # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —á–∞—Å–æ–º (–Ω–∞–π–Ω–æ–≤—ñ—à—ñ —Å–ø–æ—á–∞—Ç–∫—É)
                history.sort(key=lambda x: x.get('timestamp', ''), reverse=True)
                latest_entry = history[0]
                
                # –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
                check['current_content'] = latest_entry.get('extracted_value')
                check['current_timestamp'] = latest_entry.get('timestamp')
    
    return jsonify(checks), 200

@app.route('/api/checks/<check_id>', methods=['GET'])
def api_get_check_details(check_id):
    """API —ç–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ ID."""
    check_details = data_manager.get_check_by_id(check_id)
    if check_details:
        return jsonify(check_details), 200
    else:
        return jsonify({"error": "Check not found"}), 404

@app.route('/api/system-status', methods=['GET'])
def api_get_system_status():
    """API —ç–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã."""
    try:
        active_jobs = scheduler_tasks.scheduler.get_jobs()
        
        # –î–û–î–ê–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
        current_time = datetime.now(timezone.utc)
        overdue_jobs = []
        
        for job in active_jobs:
            if job.next_run_time and job.next_run_time < current_time:
                overdue_jobs.append({
                    "id": job.id,
                    "name": job.name,
                    "overdue_by_seconds": (current_time - job.next_run_time).total_seconds()
                })
        
        status_info = {
            "scheduler_status": "Running" if scheduler_tasks.scheduler.running else "Stopped",
            "active_scheduled_jobs": len(active_jobs),
            "overdue_jobs_count": len(overdue_jobs),
            "overdue_jobs": overdue_jobs,
            "current_time_utc": current_time.isoformat(),
            "current_time_local": current_time.astimezone().isoformat(),
            "job_ids": [job.id for job in active_jobs],
            "last_global_error": None,
            "app_version": "0.1.2"
        }
        return jsonify(status_info), 200
    except Exception as e:
        app.logger.error(f"Error getting system status: {e}", exc_info=True)
        return jsonify({"error": "Failed to get system status"}), 500

@app.route('/api/checks/<check_id>', methods=['PUT'])
def api_update_check(check_id):
    """API —ç–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    if not request.is_json:
        return jsonify({"error": "Request must be JSON"}), 400
    
    data = request.get_json()
    existing_check = data_manager.get_check_by_id(check_id)
    if not existing_check:
        return jsonify({"error": "Check not found"}), 404

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
    for key, value in data.items():
        if key in existing_check and key != "id" and key != "created_at": # –ù–µ –¥–∞–µ–º –º–µ–Ω—è—Ç—å id –∏ created_at
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±–Ω–æ–≤–ª—è–µ–º–æ–≥–æ –ø–æ–ª—è
            if key == "interval" and (not isinstance(value, int) or value < 1):
                 return jsonify({"error": "Interval must be a positive integer (minutes)"}), 400
            existing_check[key] = value
    
    all_checks = data_manager.load_checks()
    for i, chk in enumerate(all_checks):
        if chk.get("id") == check_id:
            all_checks[i] = existing_check
            break
    data_manager.save_checks(all_checks)
    
    # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if existing_check.get("status") == "active":
        scheduler_tasks.update_job(check_id, existing_check['interval'])
    else: # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ 'active', —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        scheduler_tasks.remove_job(check_id)
        
    return jsonify(existing_check), 200

@app.route('/api/checks/<check_id>', methods=['DELETE'])
def api_delete_check(check_id):
    """API —ç–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    existing_check = data_manager.get_check_by_id(check_id)
    if not existing_check:
        return jsonify({"error": "Check not found"}), 404
    
    check_name = existing_check.get('name', check_id)
    
    try:
        # 1. –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
        scheduler_tasks.remove_job(check_id)
        
        # 2. –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ø–∏—Å –∑ checks.json
        all_checks = data_manager.load_checks()
        all_checks = [chk for chk in all_checks if chk.get("id") != check_id]
        data_manager.save_checks(all_checks)
        
        # 3. –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª —ñ—Å—Ç–æ—Ä—ñ—ó
        data_manager.delete_check_history(check_id)
        
        # 4. –õ–æ–≥—É—î–º–æ —É—Å–ø—ñ—à–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        logging.info(f"Check '{check_name}' (ID: {check_id}) completely deleted with all associated data")
        
        return jsonify({
            "message": f"Check {check_id} deleted successfully", 
            "deleted_check_name": check_name
        }), 200
        
    except Exception as e:
        logging.error(f"Error during complete deletion of check {check_id}: {e}", exc_info=True)
        return jsonify({"error": "An error occurred while deleting the check"}), 500

@app.route('/api/checks/<check_id>/debug', methods=['GET'])
def api_debug_check(check_id):
    """API –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é."""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
        check_details = data_manager.get_check_by_id(check_id)
        if not check_details:
            return jsonify({"error": f"Check with ID {check_id} not found"}), 404
        
        logging.info(f"Starting debug for check {check_id}")
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
        try:
            data_manager.debug_check_data(check_id)
            logging.info(f"Debug data completed for {check_id}")
        except Exception as e:
            logging.error(f"Error during debug_check_data for {check_id}: {e}")
        
        try:
            data_manager.clean_duplicate_history_entries(check_id)
            logging.info(f"Clean duplicates completed for {check_id}")
        except Exception as e:
            logging.error(f"Error during clean_duplicate_history_entries for {check_id}: {e}")
        
        try:
            sync_result = data_manager.sync_check_with_latest_history(check_id)
            logging.info(f"Sync with history completed for {check_id}: {sync_result}")
        except Exception as e:
            logging.error(f"Error during sync_check_with_latest_history for {check_id}: {e}")
        
        return jsonify({
            "message": "Debug completed successfully", 
            "check_id": check_id,
            "details": "Check application logs for detailed debug information"
        }), 200
        
    except Exception as e:
        app.logger.error(f"Critical error during debug for {check_id}: {e}", exc_info=True)
        return jsonify({
            "error": f"Debug failed for check {check_id}",
            "details": str(e)
        }), 500

@app.route('/api/checks/<check_id>/manual-check', methods=['POST'])
def api_manual_check(check_id):
    """API –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –ø–æ–∑–∞—á–µ—Ä–≥–æ–≤–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏."""
    try:
        check_details = data_manager.get_check_by_id(check_id)
        if not check_details:
            return jsonify({"error": "Check not found"}), 404
        
        logging.info(f"Manual check triggered for {check_id} by user")
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É
        status, new_hash, extracted_text, error_msg = monitor_engine.perform_check(
            check_id=check_details['id'],
            name=check_details.get('name', 'Manual Check'),
            url=check_details['url'],
            selector=check_details['selector'],
            last_hash=check_details.get('last_content_hash')
        )
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        current_time_utc = datetime.now(timezone.utc)
        current_time_iso = current_time_utc.isoformat()
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—é
        history_entry = {
            "timestamp": current_time_iso,
            "status": status,
            "extracted_value": extracted_text,
            "content_hash": new_hash,
            "error_message": error_msg
        }
        data_manager.save_check_history_entry(check_id, history_entry)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ
        all_checks = data_manager.load_checks()
        for check in all_checks:
            if check['id'] == check_id:
                check['last_checked_at'] = current_time_iso
                check['last_result'] = status
                if status in ["changed", "no_change"]:
                    check['last_content_hash'] = new_hash
                if status != "error":
                    check['last_error_message'] = None
                else:
                    check['last_error_message'] = error_msg
                
                # –í–ò–ü–†–ê–í–õ–ï–ù–û: –û–ë–û–í'–Ø–ó–ö–û–í–û –æ–Ω–æ–≤–ª—é—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
                if check.get('status') == 'active':
                    try:
                        job = scheduler_tasks.scheduler.get_job(check_id)
                        if job and job.next_run_time:
                            next_run_local = job.next_run_time.astimezone()
                            old_time = check.get('next_check_at')
                            new_time = next_run_local.isoformat()
                            check['next_check_at'] = new_time
                            logging.info(f"üîÑ Manual check - updated next_check_at: {old_time} -> {new_time}")
                        else:
                            # –î–û–î–ê–ù–û: –Ø–∫—â–æ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ
                            logging.warning(f"No job found for active check {check_id} during manual check. Creating job...")
                            interval_minutes = check.get('interval', 5)
                            if scheduler_tasks.update_job(check_id, interval_minutes):
                                # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —á–∞—Å —â–µ —Ä–∞–∑
                                import time
                                time.sleep(0.1)
                                job = scheduler_tasks.scheduler.get_job(check_id)
                                if job and job.next_run_time:
                                    next_run_local = job.next_run_time.astimezone()
                                    check['next_check_at'] = next_run_local.isoformat()
                                    logging.info(f"‚úÖ Created missing job and set next_check_at: {check['next_check_at']}")
                                else:
                                    logging.error(f"‚ùå Failed to get next_check_at even after creating job for {check_id}")
                                    check['next_check_at'] = None
                            else:
                                logging.error(f"‚ùå Failed to create missing job for {check_id}")
                                check['next_check_at'] = None
                    except Exception as e:
                        logging.warning(f"Could not get next_run_time for job {check_id}: {e}")
                        check['next_check_at'] = None
                else:
                    # –î–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ –æ—á–∏—â—É—î–º–æ —á–∞—Å
                    check['next_check_at'] = None
                break
        
        data_manager.save_checks(all_checks)
        
        # –î–û–î–ê–ù–û: –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
        scheduler_job = scheduler_tasks.scheduler.get_job(check_id)
        
        return jsonify({
            "status": status,
            "extracted_text": extracted_text,
            "error_message": error_msg,
            "timestamp": current_time_iso,
            "next_check_at": all_checks[next(i for i, c in enumerate(all_checks) if c['id'] == check_id)].get('next_check_at'),
            "scheduler_job_exists": scheduler_job is not None,
            "scheduler_next_run": scheduler_job.next_run_time.astimezone().isoformat() if scheduler_job and scheduler_job.next_run_time else None
        }), 200
        
    except Exception as e:
        app.logger.error(f"Error during manual check for {check_id}: {e}", exc_info=True)
        return jsonify({"error": "Manual check failed"}), 500

@app.route('/api/checks/<check_id>/toggle-status', methods=['POST'])
def api_toggle_check_status(check_id):
    """API –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—ó/–∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏."""
    try:
        check_details = data_manager.get_check_by_id(check_id)
        if not check_details:
            return jsonify({"error": "Check not found"}), 404
        
        current_status = check_details.get('status', 'active')
        new_status = 'paused' if current_status == 'active' else 'active'
        
        logging.info(f"Toggling check {check_id} from {current_status} to {new_status}")
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        all_checks = data_manager.load_checks()
        check_result = None
        target_check = None
        
        for check in all_checks:
            if check['id'] == check_id:
                check['status'] = new_status
                target_check = check
                # –í–ò–ü–†–ê–í–õ–ï–ù–û: –û—á–∏—â—É—î–º–æ —Å—Ç–∞—Ä–∏–π —á–∞—Å –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—ó
                if new_status == 'paused':
                    check['next_check_at'] = None
                break
        
        if not target_check:
            return jsonify({"error": "Check not found in data"}), 404
        
        # –í–ò–ü–†–ê–í–õ–ï–ù–û: –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –ü–ï–†–ï–î —Ä–æ–±–æ—Ç–æ—é –∑ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–æ–º
        data_manager.save_checks(all_checks)
        
        # –£–ø—Ä–∞–≤–ª—è—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–æ–º
        if new_status == 'active':
            # –ê–∫—Ç–∏–≤—É—î–º–æ - –¥–æ–¥–∞—î–º–æ/–ø–æ–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è
            interval_minutes = check_details.get('interval', 5)
            
            # –í–ò–ü–†–ê–í–õ–ï–ù–û: –°–ø–æ—á–∞—Ç–∫—É –≤–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ –∑–∞–≤–¥–∞–Ω–Ω—è, —è–∫—â–æ —î
            try:
                scheduler_tasks.remove_job(check_id)
                logging.info(f"Removed old job for {check_id} before activation")
            except Exception as e:
                logging.info(f"No old job to remove for {check_id}: {e}")
            
            # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è
            success = scheduler_tasks.update_job(check_id, interval_minutes)
            
            if success:
                # –í–ò–ü–†–ê–í–õ–ï–ù–û: –ß–µ–∫–∞—î–º–æ —Ç–∞ —Ñ–æ—Ä—Å—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è next_check_at
                import time
                time.sleep(0.2)  # –ó–±—ñ–ª—å—à—É—î–º–æ –ø–∞—É–∑—É –¥–ª—è —Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ—ó
                
                # –î–û–î–ê–ù–û: –ü–æ–≤—Ç–æ—Ä—é—î–º–æ —Å–ø—Ä–æ–±–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —á–∞—Å—É
                for attempt in range(3):
                    try:
                        job = scheduler_tasks.scheduler.get_job(check_id)
                        if job and job.next_run_time:
                            next_run_local = job.next_run_time.astimezone()
                            target_check['next_check_at'] = next_run_local.isoformat()
                            logging.info(f"‚úÖ Attempt {attempt+1}: Set next_check_at for activated job {check_id}: {target_check['next_check_at']}")
                            break
                        else:
                            logging.warning(f"‚ùå Attempt {attempt+1}: Could not get next_run_time for activated job {check_id}")
                            if attempt < 2:
                                time.sleep(0.1 * (attempt + 1))  # –ü—Ä–æ–≥—Ä–µ—Å–∏–≤–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞
                    except Exception as e:
                        logging.warning(f"‚ùå Attempt {attempt+1}: Error getting next_run_time for activated job {check_id}: {e}")
                        if attempt < 2:
                            time.sleep(0.1 * (attempt + 1))
                
                if not target_check.get('next_check_at'):
                    logging.error(f"‚ùå Failed to set next_check_at after 3 attempts for {check_id}")
            else:
                logging.error(f"‚ùå Failed to create job for {check_id}")
                target_check['next_check_at'] = None
            
            # –í–∏–∫–æ–Ω—É—î–º–æ –æ–¥—Ä–∞–∑—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó
            try:
                status, new_hash, extracted_text, error_msg = monitor_engine.perform_check(
                    check_id=check_details['id'],
                    name=check_details.get('name', 'Activation Check'),
                    url=check_details['url'],
                    selector=check_details['selector'],
                    last_hash=check_details.get('last_content_hash')
                )
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                current_time_utc = datetime.now(timezone.utc)
                current_time_iso = current_time_utc.isoformat()
                
                history_entry = {
                    "timestamp": current_time_iso,
                    "status": status,
                    "extracted_value": extracted_text,
                    "content_hash": new_hash,
                    "error_message": error_msg
                }
                data_manager.save_check_history_entry(check_id, history_entry)
                
                # –û–Ω–æ–≤–ª—é—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
                target_check['last_checked_at'] = current_time_iso
                target_check['last_result'] = status
                if status in ["changed", "no_change"]:
                    target_check['last_content_hash'] = new_hash
                if status != "error":
                    target_check['last_error_message'] = None
                else:
                    target_check['last_error_message'] = error_msg
                
                check_result = {
                    "status": status,
                    "extracted_text": extracted_text,
                    "error_message": error_msg
                }
                
                # –î–û–î–ê–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∞—Å –ø—ñ—Å–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
                try:
                    job = scheduler_tasks.scheduler.get_job(check_id)
                    if job and job.next_run_time:
                        next_run_local = job.next_run_time.astimezone()
                        target_check['next_check_at'] = next_run_local.isoformat()
                        logging.info(f"üîÑ Updated next_check_at after activation check: {target_check['next_check_at']}")
                except Exception as e:
                    logging.warning(f"Could not update next_check_at after activation check: {e}")
                
            except Exception as e:
                logging.error(f"Error during activation check for {check_id}: {e}")
                check_result = {
                    "status": "error",
                    "error_message": str(e)
                }
        else:
            # –î–µ–∞–∫—Ç–∏–≤—É—î–º–æ - –≤–∏–¥–∞–ª—è—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è
            scheduler_tasks.remove_job(check_id)
        
        # –í–ò–ü–†–ê–í–õ–ï–ù–û: –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –ø—ñ—Å–ª—è –≤—Å—ñ—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
        data_manager.save_checks(all_checks)
        
        # –î–û–î–ê–ù–û: –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å–≤—ñ–∂—ñ –¥–∞–Ω—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        updated_check = data_manager.get_check_by_id(check_id)
        
        return jsonify({
            "old_status": current_status,
            "new_status": new_status,
            "check_result": check_result if new_status == 'active' else None,
            "updated_check": updated_check,
            "next_check_at": updated_check.get('next_check_at'),
            "scheduler_job_exists": scheduler_tasks.scheduler.get_job(check_id) is not None
        }), 200
        
    except Exception as e:
        app.logger.error(f"Error toggling status for {check_id}: {e}", exc_info=True)
        return jsonify({"error": "Failed to toggle status"}), 500

@app.route('/api/force-check-all', methods=['POST'])
def api_force_check_all():
    """API –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –ø—Ä–∏–º—É—Å–æ–≤–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –º–æ–Ω—ñ—Ç–æ—Ä—ñ–≤."""
    try:
        logging.info("Force check all triggered by user")
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∑ scheduler_tasks
        executed_count = scheduler_tasks.execute_all_active_checks()
        
        return jsonify({
            "message": f"–ü—Ä–∏–º—É—Å–æ–≤–æ –≤–∏–∫–æ–Ω–∞–Ω–æ {executed_count} –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫",
            "executed_count": executed_count,
            "success": True
        }), 200
        
    except Exception as e:
        app.logger.error(f"Error during force check all: {e}", exc_info=True)
        return jsonify({"error": f"–ü—Ä–∏–º—É—Å–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ –≤–¥–∞–ª–∞—Å—è: {str(e)}"}), 500

@app.route('/api/scheduler-diagnostics', methods=['GET'])
def api_scheduler_diagnostics():
    """API –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞."""
    try:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∑ scheduler_tasks
        diagnostics = scheduler_tasks.get_scheduler_diagnostics()
        
        return jsonify(diagnostics), 200
    except Exception as e:
        app.logger.error(f"Error during scheduler diagnostics: {e}", exc_info=True)
        return jsonify({"error": "Diagnostics failed"}), 500

@app.route('/api/test-selector', methods=['POST'])
def api_test_selector():
    """API –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º—É —Å–∞–π—Ç—ñ."""
    if not request.is_json:
        return jsonify({"error": "Request must be JSON"}), 400
    
    data = request.get_json()
    url = data.get('url')
    selector = data.get('selector')
    
    if not url:
        return jsonify({"error": "URL is required"}), 400
    
    if not selector:
        return jsonify({"error": "Selector is required"}), 400
    
    try:
        # –¢–µ—Å—Ç—É—î–º–æ —Å–µ–ª–µ–∫—Ç–æ—Ä
        status, hash_value, extracted_text, error_msg = monitor_engine.perform_check(
            check_id="test", 
            name="Test Selector", 
            url=url, 
            selector=selector, 
            last_hash=None
        )
        
        return jsonify({
            "status": status,
            "extracted_text": extracted_text,
            "content_hash": hash_value,
            "error_message": error_msg,
            "text_length": len(extracted_text) if extracted_text else 0,
            "success": status != "error"
        }), 200
        
    except Exception as e:
        app.logger.error(f"Error testing selector: {e}", exc_info=True)
        return jsonify({"error": f"Test failed: {str(e)}"}), 500

@app.route('/api/force-update-times', methods=['POST'])
def api_force_update_times():
    """API –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –ø—Ä–∏–º—É—Å–æ–≤–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—ñ–≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫."""
    try:
        updated_count = scheduler_tasks.force_update_next_check_times()
        
        return jsonify({
            "message": f"–ü—Ä–∏–º—É—Å–æ–≤–æ –æ–Ω–æ–≤–ª–µ–Ω–æ {updated_count} —á–∞—Å—ñ–≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫",
            "updated_count": updated_count,
            "success": True
        }), 200
        
    except Exception as e:
        app.logger.error(f"Error during force update times: {e}", exc_info=True)
        return jsonify({"error": f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—ñ–≤: {str(e)}"}), 500

@app.route('/api/app-sleep-toggle', methods=['POST'])
def api_app_sleep_toggle():
    """API –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É –≤ —Ä–µ–∂–∏–º —Å–Ω—É —Ç–∞ –≤–∏—Ö–æ–¥—É –∑ –Ω—å–æ–≥–æ."""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏
        is_sleeping = scheduler_tasks.is_app_sleeping()
        
        if is_sleeping:
            # –í–∏–≤–æ–¥–∏–º–æ –∑ —Ä–µ–∂–∏–º—É —Å–Ω—É - –≤—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
            logging.info("Waking up application - resuming all active checks")
            
            # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
            success = scheduler_tasks.wake_up_app()
            
            if success:
                return jsonify({
                    "action": "wake_up",
                    "old_state": "sleeping",
                    "new_state": "active",
                    "message": "–ó–∞—Å—Ç–æ—Å—É–Ω–æ–∫ –≤–∏–≤–µ–¥–µ–Ω–æ –∑ —Ä–µ–∂–∏–º—É —Å–Ω—É. –í—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ.",
                    "success": True
                }), 200
            else:
                return jsonify({
                    "error": "–ü–æ–º–∏–ª–∫–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –∑ —Ä–µ–∂–∏–º—É —Å–Ω—É",
                    "success": False
                }), 500
        else:
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º–æ –≤ —Ä–µ–∂–∏–º —Å–Ω—É - –∑—É–ø–∏–Ω—è—î–º–æ –≤—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
            logging.info("Putting application to sleep - pausing all active checks")
            
            # –ó—É–ø–∏–Ω—è—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
            success = scheduler_tasks.put_app_to_sleep()
            
            if success:
                return jsonify({
                    "action": "sleep",
                    "old_state": "active", 
                    "new_state": "sleeping",
                    "message": "–ó–∞—Å—Ç–æ—Å—É–Ω–æ–∫ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ —Ä–µ–∂–∏–º —Å–Ω—É. –í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ.",
                    "success": True
                }), 200
            else:
                return jsonify({
                    "error": "–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è –≤ —Ä–µ–∂–∏–º —Å–Ω—É",
                    "success": False
                }), 500
                
    except Exception as e:
        app.logger.error(f"Error during app sleep toggle: {e}", exc_info=True)
        return jsonify({
            "error": f"–ü–æ–º–∏–ª–∫–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–µ–∂–∏–º–æ–º —Å–Ω—É: {str(e)}",
            "success": False
        }), 500

@app.route('/api/app-status', methods=['GET'])
def api_app_status():
    """API –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É (—Å–æ–Ω/–∞–∫—Ç–∏–≤–Ω–∏–π)."""
    try:
        is_sleeping = scheduler_tasks.is_app_sleeping()
        active_jobs = scheduler_tasks.scheduler.get_jobs() if scheduler_tasks.scheduler.running else []
        
        # –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑ —Ñ–∞–π–ª—É –¥–∞–Ω–∏—Ö
        all_checks = data_manager.load_checks()
        active_checks_count = len([check for check in all_checks if check.get('status') == 'active'])
        
        return jsonify({
            "is_sleeping": is_sleeping,
            "scheduler_running": scheduler_tasks.scheduler.running if hasattr(scheduler_tasks, 'scheduler') else False,
            "active_jobs_count": len(active_jobs),
            "active_checks": active_checks_count,  # –î–û–î–ê–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫
            "total_checks": len(all_checks),      # –î–û–î–ê–ù–û: –∑–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
            "status": "sleeping" if is_sleeping else "active"
        }), 200
        
    except Exception as e:
        app.logger.error(f"Error getting app status: {e}", exc_info=True)
        return jsonify({"error": "Failed to get app status"}), 500

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–∏ ---
if __name__ == '__main__':
    print("=== –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–ü–£–°–ö–£ ===")
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∫–∞—Ç–∞–ª–æ–≥—ñ–≤
        required_dirs = ['data', 'logs', 'data/history']
        for dir_name in required_dirs:
            dir_path = dir_name
            if not os.path.exists(dir_path):
                os.makedirs(dir_path, exist_ok=True)
                print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∫–∞—Ç–∞–ª–æ–≥: {dir_path}")
            else:
                print(f"‚úÖ –ö–∞—Ç–∞–ª–æ–≥ —ñ—Å–Ω—É—î: {dir_path}")
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        print("üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏...")
        existing_checks = data_manager.load_checks()
        active_checks = [check for check in existing_checks if check.get("status") == "active"]
        
        print(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫: {len(existing_checks)}")
        print(f"üìä –ê–∫—Ç–∏–≤–Ω–∏—Ö –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫: {len(active_checks)}")
        
        for check in active_checks:
            print(f"  ‚úì {check.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∏')} (ID: {check['id'][:8]}..., –Ü–Ω—Ç–µ—Ä–≤–∞–ª: {check.get('interval', 'N/A')} —Ö–≤.)")
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
        print("‚öôÔ∏è  –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫...")
        scheduler_tasks.init_scheduler(existing_checks)
        print("‚úÖ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        
        # –î–û–î–ê–ù–û: –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫
        print("üïí –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫...")
        update_next_check_times()
        print("‚úÖ –ß–∞—Å–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –î–û–î–ê–ù–û: –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –º–æ–Ω—ñ—Ç–æ—Ä—ñ–≤
        print("üîç –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏...")
        perform_initial_checks()
        print("‚úÖ –ü–æ—á–∞—Ç–∫–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
        # –í–ò–ü–†–ê–í–õ–ï–ù–û: –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask —Å–µ—Ä–≤–µ—Ä —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –∑–∞–ø—É—â–µ–Ω–æ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ
        print("üåê –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask —Å–µ—Ä–≤–µ—Ä...")
        print("üîó –°–µ—Ä–≤–µ—Ä –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –∑–∞ –∞–¥—Ä–µ—Å–æ—é:")
        print("   üìç –õ–æ–∫–∞–ª—å–Ω–æ: http://localhost:5000")
        print("   üìç –í –º–µ—Ä–µ–∂—ñ: http://127.0.0.1:5000")
        print("   üìç –î–ª—è –¥–æ—Å—Ç—É–ø—É –∑ —ñ–Ω—à–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤: http://[–≤–∞—à–∞_IP]:5000")
        print("=" * 50)
        
        app.run(
            debug=True, 
            host='0.0.0.0',
            port=5000,
            use_reloader=False
        )
        
    except ImportError as e:
        print(f"‚ùå –ü–û–ú–ò–õ–ö–ê –Ü–ú–ü–û–†–¢–£: {e}")
        print("üí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –∫–∞—Ç–∞–ª–æ–∑—ñ:")
        print("   cd d:\\AI\\Monitor2\\web_monitor")
        print("   python app.py")
        sys.exit(1)
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: {e}")
        logging.error(f"Critical startup error: {e}", exc_info=True)
        sys.exit(1)
        
    except (KeyboardInterrupt, SystemExit):
        print("\nüõë –ó—É–ø–∏–Ω–∫–∞ –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É...")
        logging.info("Application shutting down...")
        
    finally:
        # –ó—É–ø–∏–Ω—è—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
        if hasattr(scheduler_tasks, 'scheduler') and scheduler_tasks.scheduler and scheduler_tasks.scheduler.running:
            print("üîÑ –ó—É–ø–∏–Ω—è—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫...")
            try:
                scheduler_tasks.scheduler.shutdown(wait=False)
                print("‚úÖ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑—É–ø–∏–Ω–µ–Ω–æ")
            except Exception as e:
                print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞: {e}")

# –î–û–î–ê–ù–û: –°—Ç–≤–æ—Ä—é—î–º–æ Flask –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É
else:
    # –Ø–∫—â–æ app.py —ñ–º–ø–æ—Ä—Ç—É—î—Ç—å—Å—è, –∞ –Ω–µ –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É
    # –í—Å–µ –æ–¥–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–∞—Ç–∞–ª–æ–≥–∏
        required_dirs = ['data', 'logs', 'data/history']
        for dir_name in required_dirs:
            if not os.path.exists(dir_name):
                os.makedirs(dir_name, exist_ok=True)
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
        existing_checks = data_manager.load_checks()
        scheduler_tasks.init_scheduler(existing_checks)
        print("‚úÖ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ")
        
        # –î–û–î–ê–ù–û: –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å–∏ —ñ –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ
        update_next_check_times()
        print("‚úÖ –ß–∞—Å–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ")
        
        # –î–û–î–ê–ù–û: –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ
        perform_initial_checks()
        print("‚úÖ –ü–æ—á–∞—Ç–∫–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∏–∫–æ–Ω–∞–Ω–æ –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ: {e}")

@app.route('/static-test')
def static_test():
    """–¢–µ—Å—Ç–æ–≤–∏–π —Ä–æ—É—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤."""
    return """
    <!DOCTYPE html>
    <html>
    <head>
        <title>CSS Test</title>
        <link rel="stylesheet" href="/static/css/style.css">
    </head>
    <body>
        <div class="container">
            <h1>CSS Test</h1>
            <button class="btn btn-primary">Test Button</button>
            <p>–Ø–∫—â–æ –∫–Ω–æ–ø–∫–∞ –º–∞—î —Å–∏–Ω—ñ–π —Ñ–æ–Ω, CSS –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ.</p>
        </div>
    </body>
    </html>
    """

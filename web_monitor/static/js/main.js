// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
let isLoading = false;

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ API
async function loadChecks() {
    console.log('üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏...');
    
    if (isLoading) {
        console.log('‚è≥ –í–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ...');
        return;
    }
    
    isLoading = true;
    const container = document.getElementById('checksContainer');
    
    if (!container) {
        console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä checksContainer –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        isLoading = false;
        return;
    }
    
    container.innerHTML = '<div class="loading"></div> –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫...';
    
    try {
        // –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π URL –¥–ª—è API
        const response = await fetch('/api/checks');
        console.log('üì° –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞:', response.status);
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const checks = await response.json();
        console.log('üìã –û—Ç—Ä–∏–º–∞–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫:', checks.length);
        
        showChecks(checks);
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error);
        container.innerHTML = `
            <div class="message error">
                <p>‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: ${htmlEscape(error.message)}</p>
                <p><a href="/add" class="btn btn-add">‚ûï –î–æ–¥–∞—Ç–∏ –ø–µ—Ä—à—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É</a></p>
            </div>
        `;
    } finally {
        isLoading = false;
    }
}

function showChecks(checks) {
    const container = document.getElementById('checksContainer');
    
    if (!checks || checks.length === 0) {
        container.innerHTML = `
            <div class="message">
                <p>üîç –ù–µ–º–∞—î –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫</p>
                <p><a href="/add" class="btn btn-add">‚ûï –î–æ–¥–∞—Ç–∏ –ø–µ—Ä—à—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É</a></p>
            </div>
        `;
        return;
    }
    
    const html = checks.map(check => {
        // –î–û–î–ê–ù–û: –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        const currentContent = getCurrentContent(check);
        const contentPreview = currentContent ? getContentPreview(currentContent, 100) : null;
        
        // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å –¥–ª—è —Å—Ç–∞—Ç—É—Å—É
        const statusClass = check.status === 'paused' ? 'status-paused' : 'status-active';
        
        return `
            <li>
                <a href="/check/${check.id}" class="monitor-item ${statusClass}">
                    <div class="monitor-header">
                        <div>
                            <div class="monitor-name">üîó ${htmlEscape(check.name || '–ë–µ–∑—ñ–º–µ–Ω–Ω–∞')}</div>
                            <div class="monitor-url">${htmlEscape(check.url)}</div>
                        </div>
                        <span class="monitor-status status-${getStatusClass(check.last_result)}">
                            ${getStatusText(check.last_result)}
                        </span>
                    </div>
                    <div class="monitor-details">
                        ${contentPreview ? `
                        <div class="monitor-content-preview">
                            <strong>üìÑ –ü–æ—Ç–æ—á–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç:</strong>
                            <span class="content-preview">${htmlEscape(contentPreview)}</span>
                        </div>
                        ` : ''}
                        <p><strong>‚è∞ –û—Å—Ç–∞–Ω–Ω—è:</strong> ${formatTime(check.last_checked_at)}</p>
                        <p><strong>üîÑ –Ü–Ω—Ç–µ—Ä–≤–∞–ª:</strong> ${check.interval} —Ö–≤.</p>
                    </div>
                </a>
            </li>
        `;
    }).join('');
    
    container.innerHTML = `<ul class="monitor-list">${html}</ul>`;
}

// –î–û–î–ê–ù–û: –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
function getCurrentContent(check) {
    // –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –∑ —ñ—Å—Ç–æ—Ä—ñ—ó (—è–∫—â–æ –≤–æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞) –∞–±–æ –∑ –æ—Å–Ω–æ–≤–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    return check.current_content || check.last_extracted_value || null;
}

// –î–û–î–ê–ù–û: –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–µ–≤—å—é –∫–æ–Ω—Ç–µ–Ω—Ç—É
function getContentPreview(content, maxLength = 100) {
    if (!content) return null;
    
    // –û—á–∏—â—É—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏ —Ç–∞ –ø–µ—Ä–µ–Ω–æ—Å–∏
    const cleaned = content.toString().trim().replace(/\s+/g, ' ');
    
    if (cleaned.length <= maxLength) {
        return cleaned;
    }
    
    return cleaned.substring(0, maxLength) + '...';
}

async function loadSystemStatus() {
    console.log('üìä –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏...');
    
    const statusContainer = document.getElementById('systemStatus');
    const statusContent = document.getElementById('statusContent');
    
    if (!statusContainer || !statusContent) {
        console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        return;
    }
    
    statusContainer.style.display = 'block';
    statusContent.innerHTML = '<span class="loading"></span> –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...';
    
    try {
        const response = await fetch('/api/system-status');
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
        }
        
        const status = await response.json();
        
        let overdueWarning = '';
        if (status.overdue_jobs_count > 0) {
            overdueWarning = `
                <div class="status-warning">
                    <strong>‚ö†Ô∏è –£–í–ê–ì–ê:</strong> ${status.overdue_jobs_count} –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å!
                    <ul>
                        ${status.overdue_jobs.map(job => `
                            <li>${job.name} (–ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–æ –Ω–∞ ${Math.round(job.overdue_by_seconds)} —Å–µ–∫.)</li>
                        `).join('')}
                    </ul>
                </div>
            `;
        }
        
        statusContent.innerHTML = `
            <div class="status-item">
                <strong>üì° –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫:</strong> 
                <span class="monitor-status status-${status.scheduler_status === 'Running' ? 'active' : 'inactive'}">
                    ${status.scheduler_status === 'Running' ? 'üü¢ –ü—Ä–∞—Ü—é—î' : 'üî¥ –ó—É–ø–∏–Ω–µ–Ω–æ'}
                </span>
            </div>
            <div class="status-item"><strong>‚ö° –ó–∞–≤–¥–∞–Ω—å:</strong> ${status.active_scheduled_jobs}</div>
            <div class="status-item"><strong>‚è∞ UTC —á–∞—Å:</strong> ${formatTime(status.current_time_utc)}</div>
            <div class="status-item"><strong>üè† –õ–æ–∫–∞–ª—å–Ω–∏–π —á–∞—Å:</strong> ${formatTime(status.current_time_local)}</div>
            <div class="status-item"><strong>üè∑Ô∏è –í–µ—Ä—Å—ñ—è:</strong> ${status.app_version}</div>
            ${overdueWarning}
        `;
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ç—É—Å—É:', error);
        statusContent.innerHTML = '<span class="message error">‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</span>';
    }
}

async function loadSchedulerDiagnostics() {
    console.log('üîç –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞...');
    
    try {
        const response = await fetch('/api/scheduler-diagnostics');
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
        }
        
        const diagnostics = await response.json();
        
        console.log('üìã –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞:', diagnostics);
        
        let diagnosticsHtml = `
            <h4>üîç –î–µ—Ç–∞–ª—å–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞</h4>
            <div class="diagnostics-info">
                <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${diagnostics.status}</p>
                <p><strong>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–≤–¥–∞–Ω—å:</strong> ${diagnostics.jobs_count}</p>
                <p><strong>–ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å UTC:</strong> ${formatTime(diagnostics.current_time_utc)}</p>
                <p><strong>–ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å –ª–æ–∫–∞–ª—å–Ω–∏–π:</strong> ${formatTime(diagnostics.current_time_local)}</p>
            </div>
        `;
        
        if (diagnostics.jobs && diagnostics.jobs.length > 0) {
            diagnosticsHtml += '<h5>üìã –ó–∞–≤–¥–∞–Ω–Ω—è:</h5><ul class="jobs-list">';
            diagnostics.jobs.forEach(job => {
                const overdueClass = job.is_overdue ? 'job-overdue' : '';
                diagnosticsHtml += `
                    <li class="job-item ${overdueClass}">
                        <strong>${job.id}</strong> (${job.name})<br>
                        –ù–∞—Å—Ç—É–ø–Ω–∏–π –∑–∞–ø—É—Å–∫ UTC: ${formatTime(job.next_run_utc)}<br>
                        –ù–∞—Å—Ç—É–ø–Ω–∏–π –∑–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–∏–π: ${formatTime(job.next_run_local)}<br>
                        ${job.is_overdue ? '<span class="overdue-badge">‚ö†Ô∏è –ü–†–û–°–¢–†–û–ß–ï–ù–û</span>' : ''}
                    </li>
                `;
            });
            diagnosticsHtml += '</ul>';
        }
        
        // –ü–æ–∫–∞–∑—É—î–º–æ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ –∞–±–æ –∑–∞–º—ñ–Ω—é—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç
        const statusContent = document.getElementById('statusContent');
        statusContent.innerHTML = diagnosticsHtml;
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
        alert('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ' + error.message);
    }
}

async function forceSchedulerCheck() {
    console.log('‚ö° –ü—Ä–∏–º—É—Å–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞...');
    
    try {
        const response = await fetch('/api/scheduler-force-check', {
            method: 'POST'
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
        }
        
        const result = await response.json();
        console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–º—É—Å–æ–≤–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:', result);
        
        alert('‚úÖ –ü—Ä–∏–º—É—Å–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.');
        
        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏
        loadSystemStatus();
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏–º—É—Å–æ–≤–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:', error);
        alert('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏–º—É—Å–æ–≤–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: ' + error.message);
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
async function submitCheckForm(event) {
    event.preventDefault();
    
    const form = event.target;
    const submitButton = form.querySelector('button[type="submit"]');
    const originalText = submitButton.textContent;
    
    // –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    submitButton.textContent = '‚è≥ –°—Ç–≤–æ—Ä—é—î–º–æ...';
    submitButton.disabled = true;
    
    const formData = {
        name: document.getElementById('name').value.trim(),
        url: document.getElementById('url').value.trim(),
        selector: document.getElementById('selector').value.trim() || null,
        interval: parseInt(document.getElementById('interval').value),
        change_threshold: parseFloat(document.getElementById('change_threshold').value) || null
    };
    
    console.log('üìù –î–∞–Ω—ñ —Ñ–æ—Ä–º–∏:', formData);
    
    // –ö–ª—ñ—î–Ω—Ç—Å—å–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è
    if (!formData.url) {
        showMessage('URL —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º –ø–æ–ª–µ–º', 'error');
        resetSubmitButton();
        return;
    }
    
    if (!formData.interval || formData.interval < 1) {
        showMessage('–Ü–Ω—Ç–µ—Ä–≤–∞–ª –º–∞—î –±—É—Ç–∏ –º—ñ–Ω—ñ–º—É–º 1 —Ö–≤–∏–ª–∏–Ω–∞', 'error');
        resetSubmitButton();
        return;
    }
    
    try {
        console.log('üì° –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è...');
        const response = await fetch('/api/checks', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        });
        
        console.log('üì® –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞:', response.status);
        
        if (!response.ok) {
            const errorResult = await response.json();
            throw new Error(errorResult.error || `HTTP ${response.status}`);
        }
        
        const result = await response.json();
        console.log('‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞:', result);
        
        showMessage(`–ü–µ—Ä–µ–≤—ñ—Ä–∫—É "${result.name || '–ë–µ–∑—ñ–º–µ–Ω–Ω—É'}" —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!`, 'success');
        
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏
        setTimeout(() => {
            console.log('üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É...');
            window.location.href = '/';
        }, 2000);
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:', error);
        showMessage(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: ${error.message}`, 'error');
        resetSubmitButton();
    }
    
    function resetSubmitButton() {
        submitButton.textContent = originalText;
        submitButton.disabled = false;
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
function showMessage(message, type = 'success') {
    const existingMessage = document.querySelector('.message');
    if (existingMessage) {
        existingMessage.remove();
    }
    
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${type}`;
    messageDiv.innerHTML = `
        <p>${type === 'success' ? '‚úÖ' : '‚ùå'} ${htmlEscape(message)}</p>
    `;
    
    // –í—Å—Ç–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const header = document.querySelector('header');
    if (header) {
        header.insertAdjacentElement('afterend', messageDiv);
    } else {
        document.body.insertBefore(messageDiv, document.body.firstChild);
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª—è—î–º–æ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (messageDiv.parentNode) {
            messageDiv.remove();
        }
    }, 5000);
}

// –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
function htmlEscape(text) {
    if (!text) return '';
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

function getStatusClass(status) {
    switch (status) {
        case 'changed': return 'changed';
        case 'no_change': return 'no-change';
        case 'error': return 'error';
        default: return 'unknown';
    }
}

function getStatusText(status) {
    switch (status) {
        case 'changed': return 'üîÑ –ó–º—ñ–Ω–∏';
        case 'no_change': return '‚úÖ –ë–µ–∑ –∑–º—ñ–Ω';
        case 'error': return '‚ùå –ü–æ–º–∏–ª–∫–∞';
        default: return '‚ùì –ù–µ–≤—ñ–¥–æ–º–æ';
    }
}

function formatTime(isoString) {
    if (!isoString) return '–ù–µ –ø–µ—Ä–µ–≤—ñ—Ä—è–ª–æ—Å—å';
    
    try {
        const date = new Date(isoString);
        return date.toLocaleString('uk-UA', {
            day: '2-digit',
            month: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
        });
    } catch {
        return isoString;
    }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ –°—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞');
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –≥–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
    if (document.getElementById('checksContainer')) {
        console.log('üìã –¶–µ –≥–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏');
        loadChecks();
    }
    
    // –Ø–∫—â–æ —Ü–µ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è, –ø—Ä–∏–≤'—è–∑—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ —Ñ–æ—Ä–º–∏
    const addCheckForm = document.getElementById('addCheckForm');
    if (addCheckForm) {
        console.log('üìù –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ–æ—Ä–º—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è, –ø—Ä–∏–≤\'—è–∑—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫...');
        addCheckForm.addEventListener('submit', submitCheckForm);
    }
});

// –ï–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü—ñ–π –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ HTML
window.loadChecks = loadChecks;
window.loadSystemStatus = loadSystemStatus;

console.log('‚úÖ main.js –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');